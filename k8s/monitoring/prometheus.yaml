# https://coreos.com/operators/prometheus/docs/latest/user-guides/getting-started.html
apiVersion: 'monitoring.coreos.com/v1alpha1'
kind: 'Prometheus'
metadata:
  name: 'prometheus'
spec:
  serviceMonitorSelector:
    matchLabels:
      provider: 'LeastAuthority'
      component: 'Monitoring'

  # Keep data for a while - about 90 days.
  # https://golang.org/pkg/time/#ParseDuration
  # https://groups.google.com/forum/#!topic/prometheus-developers/iS-pg5i_eOI
  # https://prometheus.io/docs/operating/storage/#settings-for-very-long-retention-time
  retention: '2160h'

  # Select ConfigMaps that configure Prometheus rules of various sorts.
  ruleSelector:
    matchLabels:
      provider: 'LeastAuthority'
      component: 'Monitoring'
      role: 'prometheus-rulefiles'

  version: 'v1.7.0'
  resources:
    requests:
      memory: '400Mi'

  # Associate some persistent storage so that stats survive restarts,
  # rescheduling, etc.
  storage:
    class: 'normal'
    resources:
      requests:
        storage: '40Gi'
---
apiVersion: 'v1'
kind: 'ConfigMap'
metadata:
  name: 'prometheus-rules'
  labels:
    provider: 'LeastAuthority'
    component: 'Monitoring'
    role: 'prometheus-rulefiles'
data:
  recording.rules: |
    cpu:container_usage_seconds:rate1m =
      sum(rate(container_cpu_usage_seconds_total{pod_name!=""}[1m]))

    cpu:container_usage_seconds:rate5m =
      sum(rate(container_cpu_usage_seconds_total{pod_name!=""}[5m]))

    cpu:container_usage_seconds:rate10m =
      sum(rate(container_cpu_usage_seconds_total{pod_name!=""}[10m]))

    cores:machine_cpu:total =
      sum(machine_cpu_cores)

    rss:container_memory:total =
      sum(container_memory_rss)

    receive:container_network_bytes:rate1m =
      sum(rate(container_network_receive_bytes_total{id="/",interface="eth0"}[1m]))

    transmit:container_network_bytes:rate1m =
      sum(rate(container_network_transmit_bytes_total{id="/",interface="eth0"}[1m]))
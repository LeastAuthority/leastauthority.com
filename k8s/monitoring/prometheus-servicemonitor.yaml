# https://coreos.com/operators/prometheus/docs/latest/user-guides/getting-started.html
#
# The _old_ idea of our Prometheus architecture is that applications will log
# to Fluentd and Fluentd will be configured with a Prometheus output plugin.
# It will construct the desired metrics data from the log stream and expose
# that data to Prometheus for collection.
#
# The new idea is that, because Fluentd configuration is so clunky and
# prometheus-operator is so good at going out and grabbing metrics from
# different pods, we'll have a bunch of service monitors that tell prometheus
# where to go look and let it do that and we'll shrink down Fluentd's role as
# much as possible.

apiVersion: 'monitoring.coreos.com/v1alpha1'
kind: 'ServiceMonitor'
metadata:
  name: 's4-fluentd'
  labels:
    provider: 'LeastAuthority'
    component: 'Monitoring'
spec:
  selector:
    # Select the Fluentd server.

    matchLabels:
      provider: 'LeastAuthority'
      component: 'Monitoring'
  endpoints:
  # And scrape metrics from its prometheus output plugin.
  - port: 'prometheus'

---
apiVersion: 'monitoring.coreos.com/v1alpha1'
kind: 'ServiceMonitor'
metadata:
  name: 's4-signup'
  labels:
    provider: 'LeastAuthority'
    component: 'Monitoring'
spec:
  selector:
    # Select the s4 signup server service.
    matchLabels:
      provider: 'LeastAuthority'
      app: 's4'
      component: 'Infrastructure'
  endpoints:
  # And scrape metrics from its prometheus output plugin.
  - port: 'metrics'

---
apiVersion: 'monitoring.coreos.com/v1alpha1'
kind: 'ServiceMonitor'
metadata:
  name: 'k8s-nodes'
  labels:
    provider: 'LeastAuthority'
    component: 'Monitoring'
spec:
  selector:
    # Select the node exporter service.
    matchLabels:
      app: 'disk-exporter'
      k8s-app: 'disk-exporter'
  endpoints:
  # And scrape metrics from its prometheus output plugin.
  - port: 'http-metrics'
---
apiVersion: 'monitoring.coreos.com/v1alpha1'
kind: 'ServiceMonitor'
metadata:
  name: 'tahoe-lafs-transfer-rate'
  labels:
    provider: 'LeastAuthority'
    component: 'Monitoring'
spec:
  selector:
    # Select the node exporter service.
    matchLabels:
      app: 'tahoe-lafs-transfer-rate-monitor'
      k8s-app: 'tahoe-lafs-transfer-rate-monitor'
  endpoints:
  # And scrape metrics from its prometheus output plugin.
  - port: 'http-metrics'
---
# https://github.com/coreos/prometheus-operator/blob/92b5a896d2265f89caa1f87240291ba623ea8a99/contrib/kube-prometheus/manifests/prometheus/prometheus-k8s-servicemonitors.yaml#L25-L46
# This gets us metrics from the kubelet-embedded cAdvisor on each Kubernetes
# node.  These metrics basically describe a bunch of stuff about the nodes
# (including some stuff about the containers they're running).
apiVersion: monitoring.coreos.com/v1alpha1
kind: ServiceMonitor
metadata:
  name: k8s-apps-https
  labels:
    k8s-apps: https
    # Added these two labels so our Prometheus will select this
    # ServiceMonitor.
    provider: 'LeastAuthority'
    component: 'Monitoring'
spec:
  jobLabel: k8s-app
  selector:
    matchExpressions:
    - {key: k8s-app, operator: Exists}
  namespaceSelector:
    matchNames:
    - kube-system
  endpoints:
  - port: https-metrics
    interval: 15s
    scheme: https
    tlsConfig:
      caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecureSkipVerify: true
    bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token

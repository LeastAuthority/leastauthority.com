#!/usr/bin/env python

from sys import argv
from time import sleep
from subprocess import CalledProcessError, check_output, check_call
from tempfile import NamedTemporaryFile
from json import loads

from twisted.python.filepath import FilePath

from pyrsistent import freeze, thaw

from yaml import safe_load
from json import dumps

HERE = FilePath(__file__).parent()

def value(seq, pred):
    def check(idx):
        return pred(seq[idx])
    return check

def name(pred):
    def check(value):
        return pred(value.name)
    return check

def equals(expected):
    def check(actual):
        return actual == expected
    return check

class KubeControl(object):
    def __init__(self, context):
        self.context = context

    def check_output(self, args):
        return check_output([u"kubectl", u"--context", self.context] + args)

    def kubectl_call(self, args):
        return check_call([u"kubectl", u"--context", self.context] + args)


def main(rev=None):
    kubectl = KubeControl(context=u"staging")

    template = HERE.child("build-image-template.yaml")
    with template.open() as fObj:
        job = freeze(safe_load(fObj))
    if rev is None:
        rev = check_output([u"git", u"rev-parse", u"--short", u"HEAD"]).strip()
    git_rev = value(job.spec.template.spec.containers[0].env, name(equals(u"GIT_REV")))
    job = job.transform(
        [u"spec", u"template", u"spec", u"containers", 0, u"env", git_rev, u"value"],
        rev.decode("ascii"),
    )

    with NamedTemporaryFile() as fObj:
        # Specifically use JSON here because Kubernetes (1.6.x) yaml parser is
        # buggy.  For example, it treats ``153e147`` as a number instead of a
        # string.  Quotes are required to force the string interpretation.
        # Bypass all of that by going with a format that more than one person
        # can actually understand.
        fObj.write(dumps(thaw(job)))
        fObj.flush()

        print(kubectl.check_output([u"create", u"-f", fObj.name]))

    try:
        watch(kubectl, job)
    finally:
        # Job cleanup is the responsibility of the job creator.  Do this
        # if the job succeeded.  Leave it for debugging otherwise.
        print(kubectl.check_output([u"delete", u"job", job.metadata.name]))


def watch(kubectl, job):
    while True:
        job_name = kubectl.check_output([
            u"get", u"pods",
            u"--show-all", u"--selector=job-name={}".format(job.metadata.name),
            u"--output=jsonpath={.items..metadata.name}",
        ]).decode("ascii").strip()
        if u" " not in job_name:
            # Sometimes there's garbage left over from a previous job.  Keep
            # checking pods until there's just the one we want.  This lame but
            # simple.
            break

    while True:
        try:
            kubectl.check_call([
                u"logs", u"--follow", u"--timestamps",
                u"jobs/{}".format(job.metadata.name),
            ])
        except CalledProcessError as e:
            print(str(e))
            sleep(1)
        else:
            break


main(*argv[1:])

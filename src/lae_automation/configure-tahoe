#!/usr/bin/env python
# Copyright Least Authority Enterprises.
# See LICENSE for details.

#
# configure-tahoe reads an lae-specific description of tahoe
# introducer/storage configuration and dumps it into a form usable by
# tahoe introducer and storage nodes.
#
# The configuration is a json blob read from stdin.  The structure is
# that emitted by lae_automation.server.marshal_tahoe_configuration.
#
# This is an independent script so it can be copied to and run in
# another execution context (such as an EC2 instance or a container)
# where the rest of the leastauthority.com repository is unavailable.
#

from errno import ENOENT, EEXIST
from sys import argv, stdin
from json import load
from time import time

from twisted.python.filepath import FilePath

from foolscap.furl import decode_furl, encode_furl

INTRODUCER_CFG_TEMPLATE = """# -*- mode: conf; coding: utf-8 -*-

# This file controls the configuration of the Tahoe node that
# lives in this directory. It is only read at node startup.
# For details about the keys that can be set here, please
# read the 'docs/configuration.rst' file that came with your
# Tahoe installation.


[node]
nickname =
web.port =
web.static = public_html

# This gives a Twisted endpoint description string defining where the
# introducer will listen for Foolscap connections.
tub.port = tcp:port=%(tub_port_number)s

# This gives the furl of a Foolscap log gatherer where we can send our
# logs.
log_gatherer.furl = %(log_gatherer_furl)s

[client]
stats_gatherer.furl = %(stats_gatherer_furl)s
"""

STORAGE_CFG_TEMPLATE = """# -*- mode: conf; coding: utf-8 -*-

# This file controls the configuration of the Tahoe node that
# lives in this directory. It is only read at node startup.
# For details about the keys that can be set here, please
# read the 'docs/configuration.rst' file that came with your
# Tahoe installation.


[node]
nickname = %(nickname)s
web.port =
web.static = public_html

# This gives a Twisted endpoint description string defining where the
# storage node will listen for Foolscap connections.
tub.port = tcp:port=%(private_port_number)s

# This gives a comma-separated list of ip:port pairs which will be
# published as locations at which this storage node's Foolscap server
# can be reached.
tub.location = %(publichost)s:%(public_port_number)s

# This gives the furl of a Foolscap log gatherer where we can send our
# logs.
log_gatherer.furl = %(log_gatherer_furl)s

[client]
# Which services should this client connect to?
introducer.furl = %(introducer_furl)s
helper.furl =
stats_gatherer.furl = %(stats_gatherer_furl)s

[storage]
# Shall this node provide storage service?
enabled = true
backend = s3
s3.access_key_id = %(s3_access_key_id)s
s3.bucket = %(bucket_name)s
s3.prefix = %(key_prefix)s

[helper]
# Shall this node run a helper service that clients can use?
enabled = false

[drop_upload]
# Shall this node automatically upload files created or modified in a local directory?
enabled = false
local.directory =
"""

def main(root):
    config = load(stdin)
    if "introducer" in config:
        section = config["introducer"]
        configure_introducer(
            introducer=FilePath(root),
            port=section["port"],
            node_pem=section["node_pem"],
            introducer_furl=section["introducer_furl"],
            log_gatherer_furl=section.get("log_gatherer_furl", ""),
            stats_gatherer_furl=section.get("stats_gatherer_furl", ""),
        )
    if "storage" in config:
        section = config["storage"]
        configure_storage(
            storage=FilePath(root),
            port=section["port"],
            node_pem=section["node_pem"],
            node_privkey=section["node_privkey"],
            bucket_name=section["bucket_name"],
            key_prefix=section["key_prefix"],
            publichost=section["publichost"],
            privatehost=section["privatehost"],
            introducer_furl=section["introducer_furl"],
            s3_access_key_id=section["s3_access_key_id"],
            s3_secret_key=section["s3_secret_key"],
            log_gatherer_furl=section.get("log_gatherer_furl", ""),
            stats_gatherer_furl=section.get("stats_gatherer_furl", ""),
        )


def configure_introducer(
        introducer, port, node_pem, introducer_furl,
        log_gatherer_furl, stats_gatherer_furl,
):
    preferred_furl_path = introducer.descendant((b"private", b"introducer.furl"))
    force_remove(introducer.child(b"introducer.furl"))
    force_remove(preferred_furl_path)
    force_remove(introducer.child(b"logport.furl"))

    configure_secrets(introducer, node_pem)
    # configure_secrets creates private directory if necessary
    preferred_furl_path.setContent(introducer_furl)
    tahoe_cfg = INTRODUCER_CFG_TEMPLATE % dict(
        tub_port_number=port,
        log_gatherer_furl=log_gatherer_furl,
        stats_gatherer_furl=stats_gatherer_furl,
    )
    introducer.child(b"tahoe.cfg").setContent(tahoe_cfg)


def add_preferred_address(host, furl):
    tub_id, location_hints, name = decode_furl(furl)
    port = location_hints[0].split(":")[1]
    location_hints.insert(0, host + ":" + port)
    return encode_furl(tub_id, location_hints, name)


def configure_storage(
        storage, port, node_pem, node_privkey,
        bucket_name, key_prefix, publichost, privatehost, introducer_furl,
        s3_access_key_id, s3_secret_key,
        log_gatherer_furl, stats_gatherer_furl,
):
    configure_secrets(storage, node_pem)
    if node_privkey is not None:
        storage.descendant((b"private", b"node.privkey")).setContent(node_privkey)
    storage.descendant((b"private", b"s3secret")).setContent(s3_secret_key)

    tahoe_cfg = STORAGE_CFG_TEMPLATE % dict(
        nickname=bucket_name,
        publichost=publichost,
        privatehost=privatehost,
        private_port_number=port,
        public_port_number=10000,
        introducer_furl=add_preferred_address(privatehost, introducer_furl),
        s3_access_key_id=s3_access_key_id,
        bucket_name=bucket_name,
        key_prefix=key_prefix,
        log_gatherer_furl=log_gatherer_furl,
        stats_gatherer_furl=stats_gatherer_furl,
    )

    storage.child(b"tahoe.cfg").setContent(tahoe_cfg)

    # This file contains the last sequence number used in an announcement to
    # the configured introducer.  The sequence number is used to prevent
    # replay attacks.  Subsequent announcements for the "same" storage server
    # must use increasing sequence numbers.  A "normal" deployment uses this
    # file as persistent storage of the last used sequence number to allow
    # correct announcements across storage server restarts.  Our storage
    # server deployment has no persistent filesystem storage for this kind of
    # thing.  Thus, we must supply a suitable sequence number ourselves or a
    # restart storage server container (as in the case of the storage server
    # failing its health check) cannot announce itself to the introducer and
    # clients can never communicate with it.
    #
    # It would be a significant effort to reliably capture the actual sequence
    # number persisted to this file by Tahoe-LAFS so instead we make up a new,
    # very-probably-larger-than-it-was number.  This does rely on clocks
    # behaving well (if time goes backwards far enough during a storage server
    # restart, the sequence number will appear to go down and the introducer
    # will reject the resulting announcement).  We can probably rely on that.
    # Also, a health check which starts at the introducer should be able to
    # eventually detect this circumstance and restart the storage server
    # container _again_ and the chances of time going backwards _again_ are
    # fairly low.  This doesn't address the possibility of time erroneously
    # going _forward_ for the duration of one storage server startup, however
    # (after which, when the clock is reset to be "correct", the sequence
    # number will be too small).
    #
    # Possibly a superior solution would be to not have the storage server
    # container restart as the "same" storage server but instead claim a new
    # identity, announcements from which are not subject to the same
    # constraints.  This would slowly increase the number of storage server
    # announcements resident in the introducer and could eventually cause
    # problems... but hopefully our storage servers won't actually require
    # restarting so often that this would become a practical concern.  TODO:
    # Investigate this option.
    storage.child(b"announcement-seqnum").setContent(
        u"{}".format(int(time())).encode("ascii"),
    )


def configure_secrets(root, node_pem):
    private = root.child(b"private")
    makedir_if_missing(private, mode=0o700)
    if node_pem is not None:
        private.child(b"node.pem").setContent(node_pem)


def makedir_if_missing(path, mode):
    try:
        path.makedirs()
    except OSError as e:
        if EEXIST != e.errno:
            raise
    else:
        path.chmod(mode)


def force_remove(path):
    try:
        path.remove()
    except OSError as e:
        if ENOENT != e.errno:
            raise


if __name__ == '__main__':
    main(*argv[1:])
